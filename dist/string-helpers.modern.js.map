{"version":3,"file":"string-helpers.modern.js","sources":["../src/lcfirst.ts","../src/ucfirst.ts","../src/normalize.ts","../src/snake.ts","../src/regexp/sanitize.ts","../src/index.ts","../src/camel.ts","../src/headline.ts","../src/random.ts","../src/regexp/index.ts","../src/regexp/path.ts","../src/squish.ts"],"sourcesContent":["export default (str: string): string => str.charAt(0).toLowerCase() + str.slice(1);\n","export default (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\n","import ucfirst from \"./ucfirst\";\n\nexport default (str: string): string => str.replace(\n  /* match words as: aAAAA, Aaaaa, aaaaa, or AAAAA, then convert them to Aaaaa */\n  /((?<=^|[^a-z])[a-z][A-Z]{2,}|(?<=^|[^A-Z])[A-Z][a-z]{2,}|(?<=^|[^a-zA-Z])[a-z]+|(?<=^|[^a-zA-Z])[A-Z]+)/g,\n  (word) => ucfirst(word.toLowerCase())\n)\n","import normalize from \"./normalize\";\n\n/**\n * Convert a string to snake_case\n *\n * @param str\n */\nexport default (str: string): string =>\n  normalize(str)\n    .replaceAll(/([^a-z0-9_]+)/g, \"_$1\")\n    .toLowerCase()\n    .replaceAll(/[^a-z0-9]+/g, \"_\")\n    .replace(/^_+|_+$/g, \"\");\n","/**\n * Escapes regular expression characters in a string.\n *\n * @param str\n */\nexport default (str: string): string => str.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n","import camel from \"./camel\";\nimport headline from \"./headline\";\nimport lcfirst from \"./lcfirst\";\nimport random from \"./random\";\nimport regexp from \"./regexp\";\nimport snake from \"./snake\";\nimport squish from \"./squish\";\nimport ucfirst from \"./ucfirst\";\n\nexport default {\n  camel,\n  headline,\n  lcfirst,\n  random,\n  regexp,\n  snake,\n  squish,\n  ucfirst,\n};\n","import lcfirst from \"./lcfirst\";\nimport normalize from \"./normalize\";\n\n/**\n * Convert a string to camelCase\n *\n * @param str\n */\nexport default (str: string): string => lcfirst(str\n    .split(/[^a-z0-9]/ig)\n    .map(normalize)\n    .join('')\n);\n","import snake from \"./snake\";\nimport ucfirst from \"./ucfirst\";\n\n/**\n * Converts a string to Headline Case\n *\n * @param str\n */\nexport default (str: string): string => snake(str).split(\"_\").map(ucfirst).join(\" \");\n","/**\n * Generates a random string of the given length\n *\n * @param length\n */\nexport default (length = 16): string =>\n  Array.from(crypto.getRandomValues(new Uint8Array(Math.max(1, length))), (v) => v.toString(36)).join(\"\");\n","import path from \"./path\";\nimport sanitize from \"./sanitize\";\n\nexport default {\n  sanitize,\n  path,\n};\n","import sanitize from \"./sanitize\";\n\n/**\n * Converts a path string with wildcards (e.g. `*.example.com`) to a regular expression.\n *\n * @param str\n * @param start\n * @param end\n */\nexport default (str: string, start = \"^\", end = \"$\"): RegExp => {\n  let head = start;\n  let tail = end;\n  let body = str ?? \"\";\n\n  if (body.startsWith(\"*.\")) {\n    head = `${start}[a-zA-Z0-9-_]+`;\n    body = body.slice(1);\n  }\n\n  if (body.endsWith(\".*\")) {\n    tail = `[a-zA-Z0-9-_.]+${end}`;\n    body = body.slice(0, -1);\n  }\n\n  body = body.split(\".*.\").map(sanitize).join(\".[a-zA-Z0-9-_]+.\");\n\n  return new RegExp(`${head}${body}${tail}`);\n};\n","export default (str: string): string => str.replaceAll(/\\s+/g, \" \").trim();\n"],"names":["lcfirst","str","charAt","toLowerCase","slice","ucfirst","toUpperCase","normalize","replace","word","snake","replaceAll","index","camel","split","map","join","headline","random","length","Array","from","crypto","getRandomValues","Uint8Array","Math","max","v","toString","regexp","sanitize","path","start","end","head","tail","body","startsWith","endsWith","RegExp","squish","trim"],"mappings":"AAAA,IAAAA,EAAgBC,GAAwBA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GCAhFC,EAAgBJ,GAAwBA,EAAIC,OAAO,GAAGI,cAAgBL,EAAIG,MAAM,GCEhFG,EAAgBN,GAAwBA,EAAIO,QAE1C,2GACCC,GAASJ,EAAQI,EAAKN,gBCEzBO,EAAgBT,GACdM,EAAUN,GACPU,WAAW,iBAAkB,OAC7BR,cACAQ,WAAW,cAAe,KAC1BH,QAAQ,WAAY,ICPTP,EAAAA,GAAwBA,EAAIO,QAAQ,sBAAuB,QCI3EI,EAAe,CACbC,MCFcZ,GAAwBD,EAAQC,EAC3Ca,MAAM,eACNC,IAAIR,GACJS,KAAK,KDARC,SEHchB,GAAwBS,EAAMT,GAAKa,MAAM,KAAKC,IAAIV,GAASW,KAAK,KFI9EhB,UACAkB,OGRa,CAACC,EAAS,KACvBC,MAAMC,KAAKC,OAAOC,gBAAgB,IAAIC,WAAWC,KAAKC,IAAI,EAAGP,KAAYQ,GAAMA,EAAEC,SAAS,KAAKZ,KAAK,IHQpGa,OIXa,CACbC,WACAC,KCIa,CAAC9B,EAAa+B,EAAQ,IAAKC,EAAM,OAC9C,IAAIC,EAAOF,EACPG,EAAOF,EACPG,EAAOnC,MAAAA,EAAAA,EAAO,GAclB,OAZImC,EAAKC,WAAW,QAClBH,EAAO,GAAGF,kBACVI,EAAOA,EAAKhC,MAAM,IAGhBgC,EAAKE,SAAS,QAChBH,EAAO,kBAAkBF,IACzBG,EAAOA,EAAKhC,MAAM,GAAI,IAGxBgC,EAAOA,EAAKtB,MAAM,OAAOC,IAAIe,GAAUd,KAAK,oBAEjC,IAAAuB,OAAO,GAAGL,IAAOE,IAAOD,IAAM,GLXzCzB,QACA8B,OMhBcvC,GAAwBA,EAAIU,WAAW,OAAQ,KAAK8B,ONiBlEpC"}