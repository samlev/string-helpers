{"version":3,"file":"string-helpers.modern.js","sources":["../src/lcfirst.ts","../src/ucfirst.ts","../src/normalize.ts","../src/studly.ts","../src/regexp/sanitize.ts","../src/index.ts","../src/camel.ts","../src/headline.ts","../src/random.ts","../src/regexp/index.ts","../src/regexp/path.ts","../src/snake.ts","../src/squish.ts"],"sourcesContent":["export default (str: string): string => str.charAt(0).toLowerCase() + str.slice(1);\n","export default (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\n","import ucfirst from \"./ucfirst\";\n\nexport default (str: string): string =>\n  str.replace(\n    /* match words as: aAAAA, Aaaaa, aaaaa, or AAAAA, then convert them to Aaaaa */\n    /((?<=^|[^a-z])[a-z][A-Z]{2,}|(?<=^|[^A-Z])[A-Z][a-z]{2,}|(?<=^|[^a-zA-Z])[a-z]+|(?<=^|[^a-zA-Z])[A-Z]+)/g,\n    (word) => ucfirst(word.toLowerCase()),\n  );\n","import normalize from \"./normalize\";\n\n/**\n * Convert a string to StudlyCase\n *\n * @param str\n */\nexport default (str: string): string =>\n  str\n    .split(/[^a-z0-9]/gi)\n    .map(normalize)\n    .join(\"\");\n","/**\n * Escapes regular expression characters in a string.\n *\n * @param str\n */\nexport default (str: string): string => str.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n","import camel from \"./camel\";\nimport headline from \"./headline\";\nimport lcfirst from \"./lcfirst\";\nimport normalize from \"./normalize\";\nimport random from \"./random\";\nimport regexp from \"./regexp\";\nimport snake from \"./snake\";\nimport squish from \"./squish\";\nimport studly from \"./studly\";\nimport ucfirst from \"./ucfirst\";\n\nexport default {\n  camel,\n  headline,\n  lcfirst,\n  normalize,\n  random,\n  regexp,\n  snake,\n  squish,\n  studly,\n  ucfirst,\n};\n","import lcfirst from \"./lcfirst\";\nimport studly from \"./studly\";\n\n/**\n * Convert a string to camelCase\n *\n * @param str\n */\nexport default (str: string): string => lcfirst(studly(str));\n","import studly from \"./studly\";\n\n/**\n * Converts a string to Headline Case\n *\n * @param str\n */\nexport default (str: string): string =>\n  studly(str)\n    .replaceAll(/(?<=^|[a-z])([A-Z0-9])/g, \" $1\")\n    .replaceAll(/(?<=^|[0-9])([A-Za-z])/g, \" $1\")\n    .trim();\n","/**\n * Generates a random string of the given length\n *\n * @param length\n */\nexport default (length = 16): string =>\n  Array.from(crypto.getRandomValues(new Uint8Array(Math.max(1, length))), (v) => v.toString(36)).join(\"\");\n","import path from \"./path\";\nimport sanitize from \"./sanitize\";\n\nexport default {\n  sanitize,\n  path,\n};\n","import sanitize from \"./sanitize\";\n\n/**\n * Converts a path string with wildcards (e.g. `*.example.com`) to a regular expression.\n *\n * @param str\n * @param start\n * @param end\n */\nexport default (str: string, start = \"^\", end = \"$\"): RegExp => {\n  let head = start;\n  let tail = end;\n  let body = str ?? \"\";\n\n  if (body.startsWith(\"*.\")) {\n    head = `${start}[a-zA-Z0-9-_]+`;\n    body = body.slice(1);\n  }\n\n  if (body.endsWith(\".*\")) {\n    tail = `[a-zA-Z0-9-_.]+${end}`;\n    body = body.slice(0, -1);\n  }\n\n  body = body.split(\".*.\").map(sanitize).join(\".[a-zA-Z0-9-_]+.\");\n\n  return new RegExp(`${head}${body}${tail}`);\n};\n","import studly from \"./studly\";\n\n/**\n * Converts a string to Headline Case\n *\n * @param str\n */\nexport default (str: string): string =>\n  studly(str)\n    .replaceAll(/(?<=[a-z])([A-Z0-9])/g, \"_$1\")\n    .replaceAll(/(?<=[0-9])([A-Za-z])/g, \"_$1\")\n    .toLowerCase();\n","export default (str: string): string => str.replaceAll(/\\s+/g, \" \").trim();\n"],"names":["lcfirst","str","charAt","toLowerCase","slice","ucfirst","toUpperCase","normalize","replace","word","studly","split","map","join","index","camel","headline","replaceAll","trim","random","length","Array","from","crypto","getRandomValues","Uint8Array","Math","max","v","toString","regexp","sanitize","path","start","end","head","tail","body","startsWith","endsWith","RegExp","snake","squish"],"mappings":"AAAA,IAAAA,EAAgBC,GAAwBA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GCAhFC,EAAgBJ,GAAwBA,EAAIC,OAAO,GAAGI,cAAgBL,EAAIG,MAAM,GCEhFG,EAAgBN,GACdA,EAAIO,QAEF,2GACCC,GAASJ,EAAQI,EAAKN,gBCC3BO,EAAgBT,GACdA,EACGU,MAAM,eACNC,IAAIL,GACJM,KAAK,ICNMZ,EAAAA,GAAwBA,EAAIO,QAAQ,sBAAuB,QCM5DM,EAAA,CACbC,MCJcd,GAAwBD,EAAQU,EAAOT,IDKrDe,SENcf,GACdS,EAAOT,GACJgB,WAAW,0BAA2B,OACtCA,WAAW,0BAA2B,OACtCC,OFGHlB,UACAO,YACAY,OGXa,CAACC,EAAS,KACvBC,MAAMC,KAAKC,OAAOC,gBAAgB,IAAIC,WAAWC,KAAKC,IAAI,EAAGP,KAAYQ,GAAMA,EAAEC,SAAS,KAAKhB,KAAK,IHWpGiB,OIda,CACbC,WACAC,KCIa,CAAC/B,EAAagC,EAAQ,IAAKC,EAAM,OAC9C,IAAIC,EAAOF,EACPG,EAAOF,EACPG,EAAOpC,MAAAA,EAAAA,EAAO,GAclB,OAZIoC,EAAKC,WAAW,QAClBH,EAAO,GAAGF,kBACVI,EAAOA,EAAKjC,MAAM,IAGhBiC,EAAKE,SAAS,QAChBH,EAAO,kBAAkBF,IACzBG,EAAOA,EAAKjC,MAAM,GAAI,IAGxBiC,EAAOA,EAAK1B,MAAM,OAAOC,IAAImB,GAAUlB,KAAK,oBAEjC,IAAA2B,OAAO,GAAGL,IAAOE,IAAOD,IAAM,GLRzCK,MMXcxC,GACdS,EAAOT,GACJgB,WAAW,wBAAyB,OACpCA,WAAW,wBAAyB,OACpCd,cNQHuC,OOnBczC,GAAwBA,EAAIgB,WAAW,OAAQ,KAAKC,OPoBlER,SACAL"}